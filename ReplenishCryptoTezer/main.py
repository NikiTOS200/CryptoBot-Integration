import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from RCTZ import TezerReplenish

# –ü–µ—Ä–µ–¥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç—å API tokens –∏ –≤ RCTZ url –Ω–∞ url –±–µ–∑ testnet
bot = Bot(token='YOUR-API-KEY')
dp = Dispatcher(storage=MemoryStorage())
rctz = TezerReplenish('YOUR-API-KEY')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class PaymentStates(StatesGroup):
    WaitingForPayment = State()

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    if await state.get_state() == PaymentStates.WaitingForPayment.state:
        await message.answer("‚ö† –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Buy 5 Tezer üí∏", callback_data="buy_5")],
            [InlineKeyboardButton(text="Buy 1 Tezer üí∏", callback_data="buy_1")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Tezer –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ü–û–ö–£–ü–ö–ò ---
@dp.callback_query(lambda c: c.data in ["buy_5", "buy_1"])
async def buy_tezer(callback: types.CallbackQuery, state: FSMContext):
    if await state.get_state() == PaymentStates.WaitingForPayment.state:
        await callback.answer("‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.", show_alert=True)
        return
    async def create_pay(amount: float, asset: str, description: str):
        invoice_data = rctz.open_invoice(amount=amount, asset=asset, description=description)
        if not invoice_data["ok"]:
            await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        amount_bot = 5 if callback.data == "buy_5" else 1
        invoice_id = invoice_data["result"]["invoice_id"]
        payment_url = invoice_data["result"]["mini_app_invoice_url"]
        await state.set_state(PaymentStates.WaitingForPayment)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã

        cancel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="Close a purchase order ‚ùå", callback_data=f"cancel_{invoice_id}")]]
        )
        await callback.message.edit_text(
            f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω\nüí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ {amount_bot} Tezer \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n{payment_url}",
            reply_markup=cancel_keyboard
        )
        await check_payment(callback.from_user.id, invoice_id, callback.message.message_id, state)

    if callback.data == "buy_5":
        await create_pay(amount=3, asset='TRX', description="Replenishment of Tezer wallet for 3 TRX")
    elif callback.data == "buy_1":
        await create_pay(amount=0.1, asset='TON', description="Replenishment of Tezer wallet for 0.1 TON")

# --- –û–¢–ú–ï–ù–ê –ü–û–ö–£–ü–ö–ò ---
@dp.callback_query(lambda c: c.data.startswith("cancel_"))
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    if await state.get_state() is None:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
        return

    rctz.close_invoice(int(callback.data.split("_")[1]))
    await state.clear()
    await callback.message.edit_text("‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")

# --- –ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢–´ ---
async def check_payment(user_id: int, invoice_id: int, message_id: int, state: FSMContext):
    if await rctz.check_invoice(invoice_id):
        await bot.edit_message_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω", chat_id=user_id, message_id=message_id)
    else:
        await bot.edit_message_text("‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ.", chat_id=user_id, message_id=message_id)

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# @dp.message() # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ tezer, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤–µ—à–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
# async def block_commands(message: types.Message, state: FSMContext):
#     if await state.get_state() == PaymentStates.WaitingForPayment.state:
#         await message.answer("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥!")
#         return

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))